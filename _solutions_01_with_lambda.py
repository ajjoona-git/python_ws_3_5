# ======================================================================
# 1. 전역 변수 (Global Variables) 선언
# ======================================================================
# 프로그램의 여러 부분에서 공동으로 사용하고 상태를 공유해야 하는 변수들입니다.

# 현재 대여 가능한 전체 책의 수량을 저장하는 변수입니다.
# 대여가 일어날 때마다 이 숫자가 변경되어야 하므로 프로그램 전체에서 접근 가능한 전역 변수로 선언합니다.
number_of_book = 100


def decrease_book(num):
    """
    책의 총 수량(number_of_book)을 지정된 수(num)만큼 줄이고,
    결과를 화면에 즉시 출력하는 함수입니다.

    이 함수는 값을 반환(return)하지 않고, 직접 전역 변수를 수정하고 출력하는
    부수 효과(Side Effect)를 가집니다.
    """
    # 'global' 키워드는 이 함수 내에서 'number_of_book'이라는 이름의 변수를 사용할 때,
    # 함수 외부(전역 공간)에 선언된 변수를 직접 수정하겠다는 의미입니다.
    # 만약 이 선언이 없다면, 파이썬은 함수 내부에 새로운 지역 변수를 만들려고 시도합니다.
    global number_of_book

    # 전역 변수 number_of_book의 값을 num만큼 감소시킵니다.
    number_of_book -= num

    # 변경된 후 남은 책의 수를 화면에 출력합니다.
    print('남은 책의 수 : ', number_of_book)


# 현재까지 생성된 총 사용자(회원) 수를 추적하는 전역 변수입니다.
number_of_people = 0


def increase_user():
    """
    새로운 사용자가 생성될 때마다 전체 사용자 수(number_of_people)를 1씩 증가시킵니다.
    """
    # decrease_book과 마찬가지로, 전역 변수 number_of_people을 수정하기 위해 global을 사용합니다.
    global number_of_people
    number_of_people += 1


# ======================================================================
# 2. 데이터 및 사용자 생성 로직
# ======================================================================

# 초기 사용자 정보를 담고 있는 병렬(parallel) 리스트들입니다.
# 각 리스트의 같은 인덱스는 한 명의 사용자에 대한 정보를 의미합니다.
# 예: name[0], age[0], address[0]는 '김시습'님의 정보입니다.
name = ['김시습', '허균', '남영로', '임제', '박지원']
age = [20, 16, 52, 36, 60]
address = ['서울', '강릉', '조선', '나주', '한성부']


def create_user(name, age, address):
    """
    이름, 나이, 주소를 인자로 받아 사용자 정보 딕셔너리를 생성하여 반환합니다.
    함수 실행 과정에서 사용자 수를 1 증가시키고, 환영 메시지를 출력하는 작업도 함께 수행합니다.
    """
    # 새로운 사용자가 생성되었으므로, 전체 사용자 수를 1 증가시키는 함수를 호출합니다.
    increase_user()

    # 전달받은 이름, 나이, 주소로 사용자 정보 딕셔너리를 만듭니다.
    user_info = {'name': name, 'age': age, 'address': address}

    # 사용자에게 환영 메시지를 출력하는 부수 효과를 일으킵니다.
    print(f'{name}님 환영합니다!')

    # 생성된 사용자 정보 딕셔너리를 이 함수의 결과값으로 반환(return)합니다.
    return user_info


# map 함수를 사용하여 name, age, address 리스트의 요소들을 하나씩 꺼내 create_user 함수에 인자로 전달합니다.
# list() 함수로 map 객체를 감싸는 이유는, map이 반환하는 'map 객체(이터레이터)'의 모든 계산을
# 즉시 실행하여 그 결과(사용자 딕셔너리들)를 리스트로 만들기 위함입니다.
many_user = list(map(create_user, name, age, address))


# ======================================================================
# 3. 책 대여 로직 및 실행
# ======================================================================


def rental_book(info):
    """
    한 명의 사용자 정보(info)를 받아 책 대여 처리를 수행하는 함수입니다.
    이 함수는 반환(return)값이 없으며, 다른 함수(decrease_book)를 호출하고
    메시지를 출력하는 역할만 합니다.
    """
    # 사용자 정보 딕셔너리에서 'age' 값을 가져와 decrease_book 함수에 전달합니다.
    # 이 호출로 인해 전역 변수 number_of_book의 값이 변경되고, 남은 책의 수가 출력됩니다.
    decrease_book(info['age'])

    # 대여가 완료되었다는 메시지를 추가로 출력합니다.
    print(f'{info["name"]}님이 {info["age"]}권의 책을 대여하였습니다.')


# --- 책 대여 처리 단계 1: 대여할 수량 정보 가공 ---
# map과 lambda를 사용하여, 기존 사용자 정보(many_user)를 새로운 규칙에 맞게 변환합니다.
# 대여할 책의 수는 '사용자 나이를 10으로 나눈 몫'이라는 규칙을 적용합니다.
# lambda x: ...는 일회용으로 사용할 간단한 익명 함수를 정의하는 방법입니다.
# 이 결과로 'transformed_users'는 변환 규칙을 담고 있는 'map 객체(이터레이터)'가 됩니다.
# (아직 실제 데이터 변환이 모두 일어난 상태는 아닙니다.)
transformed_users = map(
    lambda x: {'name': x['name'], 'age': x['age'] // 10}, many_user
)

# --- 책 대여 처리 단계 2: 실제 대여 실행 ---
# 'transformed_users' 이터레이터의 각 요소(변환된 사용자 정보)를 rental_book 함수에 전달합니다.
# rental_book 함수는 반환값이 'None'이고 오직 출력(side effect)만 일으킵니다.
# 만약 list()로 감싸지 않으면, map의 결과물을 아무도 사용하지 않으므로 파이썬은 연산을 실행하지 않습니다.
# list()를 사용해 map 객체를 강제로 순회(iterate)하게 만들어,
# 그 과정에서 rental_book 함수가 각 사용자에 대해 한 번씩 호출되도록 하는 것입니다.
# 결과적으로 [None, None, None, None, None] 리스트가 만들어지지만,
# 이 리스트를 변수에 저장하지 않으므로 그냥 버려지고, 우리는 함수 호출로 인한 출력 효과만 얻게 됩니다.
list(map(rental_book, transformed_users))
